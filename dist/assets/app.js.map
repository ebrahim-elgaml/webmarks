{
  "version": 3,
  "file": "app.js",
  "sources": [
    "tmp/transpiled/app/adapters/application.js",
    "tmp/transpiled/app/app.js",
    "tmp/transpiled/app/components/pretty-color.js",
    "tmp/transpiled/app/controllers/bookmarks/edit.js",
    "tmp/transpiled/app/controllers/bookmarks/index.js",
    "tmp/transpiled/app/controllers/bookmarks/new.js",
    "tmp/transpiled/app/controllers/index.js",
    "tmp/transpiled/app/helpers/reverse-word.js",
    "tmp/transpiled/app/models/bookmark.js",
    "tmp/transpiled/app/router.js",
    "tmp/transpiled/app/routes/bookmarks/edit.js",
    "tmp/transpiled/app/routes/bookmarks/index.js",
    "tmp/transpiled/app/routes/bookmarks/new.js",
    "tmp/transpiled/app/routes/component_test.js",
    "tmp/transpiled/app/routes/helper_test.js",
    "tmp/transpiled/app/routes/index.js",
    "tmp/transpiled/app/utils/register_components.js",
    "tmp/transpiled/app/views/bookmarks/new.js",
    "tmp/transpiled/app/views/import_file.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "define(\"appkit/adapters/application\",\n  [],\n  function() {\n    \"use strict\";\n    var FixtureAdapter = DS.FixtureAdapter.extend();\n\n    return FixtureAdapter;\n  });",
    "define(\"appkit/app\",\n  [\"resolver\",\"appkit/utils/register_components\",\"appkit/models/bookmark\"],\n  function(Resolver, registerComponents, Bookmark) {\n    \"use strict\";\n\n    var App = Ember.Application.extend({\n      LOG_ACTIVE_GENERATION: true,\n      LOG_MODULE_RESOLVER: true,\n      LOG_TRANSITIONS: true,\n      LOG_TRANSITIONS_INTERNAL: true,\n      LOG_VIEW_LOOKUPS: true,\n      modulePrefix: 'appkit', // TODO: loaded via config\n      Resolver: Resolver,\n      archiveBookmarks: [],\n      rsConnecting: false,\n      rsConnected: false\n    });\n\n    App.initializer({\n      name: 'Register Components',\n      initialize: function(container, application) {\n        registerComponents(container);\n      }\n    });\n\n    App.initializer({\n      name: \"remoteStorage\",\n      initialize: function(container, application) {\n        remoteStorage.access.claim('bookmarks', 'rw');\n        remoteStorage.caching.enable('/bookmarks/archive/');\n        remoteStorage.displayWidget('remotestorage-connect', { redirectUri: window.location.href });\n\n        remoteStorage.on('ready', function() {\n          application.set('rsConnecting', false);\n          application.set('rsConnected', true );\n        });\n        remoteStorage.on('disconnected', function() {\n          application.set('rsConnecting', false);\n          application.set('rsConnected', false );\n\n          application.set('archiveBookmarks', []);\n        });\n        remoteStorage.on('connecting', function() {\n          application.set('rsConnecting', true);\n          application.set('rsConnected', false );\n        });\n        remoteStorage.on('authing', function() {\n          application.set('rsConnecting', true);\n          application.set('rsConnected', false );\n        });\n\n        var archiveClient = remoteStorage.bookmarks.client.scope('archive/');\n\n        archiveClient.on('change', function(event){\n          if (event.origin !== 'remote') { return; }\n          var item;\n\n          // New object coming in from remote\n          if (!event.oldValue && event.newValue) {\n            item = Bookmark.create(event.newValue);\n            application.archiveBookmarks.pushObject(item);\n          }\n\n          // Object deleted on remote\n          if (event.oldValue && !event.newValue) {\n            item = application.archiveBookmarks.findProperty('id', event.oldValue.id);\n            application.archiveBookmarks.removeObject(item);\n          }\n\n          //TODO Object updated on remote\n        });\n      }\n    });\n\n\n    return App;\n  });",
    "define(\"appkit/components/pretty-color\",\n  [],\n  function() {\n    \"use strict\";\n    var PrettyColor = Ember.Component.extend({\n        classNames: ['pretty-color'],\n        attributeBindings: ['style'],\n        style: function(){\n          return 'color: ' + this.get('name') + ';';\n        }.property('name')\n    });\n\n\n    return PrettyColor;\n  });",
    "define(\"appkit/controllers/bookmarks/edit\",\n  [\"appkit/controllers/bookmarks/new\"],\n  function(BookmarksNewController) {\n    \"use strict\";\n\n    var BookmarksEditController = BookmarksNewController.extend();\n\n\n    return BookmarksEditController;\n  });",
    "define(\"appkit/controllers/bookmarks/index\",\n  [\"appkit/models/bookmark\"],\n  function(Bookmark) {\n    \"use strict\";\n\n    var BookmarksIndexController = Ember.ArrayController.extend({\n\n      contentBinding: 'App.archiveBookmarks',\n\n      sortProperties: ['createdAt'],\n      sortAscending: false,\n\n      init: function() {\n        this._super();\n        self = this;\n\n        // remoteStorage.bookmarks.archive.getAll().then(\n        //   function(bookmarks) {\n        //     bookmarks.forEach(function(bookmark){\n        //       var item = Bookmark.create({\n        //         id: bookmark.id,\n        //         url: bookmark.url,\n        //         title: bookmark.title,\n        //         description: bookmark.description,\n        //         tags: bookmark.tags,\n        //         createdAt: bookmark.createdAt\n        //       });\n\n        //       self.pushObject(item);\n        //     });\n        //   }\n        // );\n      },\n\n      actions: {\n        remove: function(item) {\n          self = this;\n          var bookmark = this.findProperty('id', item.id);\n\n          remoteStorage.bookmarks.archive.remove(item.id).then(\n            function() {\n              self.removeObject(bookmark);\n            },\n            function(error) {\n              alert('Something went wrong.');\n              console.log('ERROR:');\n              console.log(error);\n            }\n          );\n        }\n      }\n\n    });\n\n\n    return BookmarksIndexController;\n  });",
    "define(\"appkit/controllers/bookmarks/new\",\n  [\"appkit/models/bookmark\"],\n  function(Bookmark) {\n    \"use strict\";\n\n    var BookmarksNewController = Ember.ObjectController.extend({\n\n      archiveBookmarksBinding: 'App.archiveBookmarks',\n\n      actions: {\n        commit: function() {\n          self = this;\n\n          remoteStorage.bookmarks.archive.store(this.get('serialize')).then(\n            function(bookmark) {\n              // Remove existing item from collection if exists\n              var oldItem = self.archiveBookmarks.findProperty('id', bookmark.id);\n              if (oldItem) { self.archiveBookmarks.removeObject(oldItem); }\n\n              // Add new item to collection\n              var newItem = Bookmark.create(bookmark);\n              self.archiveBookmarks.pushObject(newItem);\n\n              self.transitionToRoute('index');\n            },\n            function(error) {\n              alert('Something went wrong.');\n              console.log('ERROR:');\n              console.log(error);\n            }\n          );\n        },\n\n        cancel: function() {\n          window.history.back();\n        }\n      }\n\n    });\n\n\n    return BookmarksNewController;\n  });",
    "define(\"appkit/controllers/index\",\n  [],\n  function() {\n    \"use strict\";\n    var IndexController = Ember.ArrayController.extend({\n\n    });\n\n\n    return IndexController;\n  });",
    "define(\"appkit/helpers/reverse-word\",\n  [],\n  function() {\n    \"use strict\";\n    var reverseWord = Ember.Handlebars.makeBoundHelper(function(word) {\n      return word.split('').reverse().join('');\n    });\n\n\n    return reverseWord;\n  });",
    "define(\"appkit/models/bookmark\",\n  [],\n  function() {\n    \"use strict\";\n    var Bookmark = Ember.Object.extend({\n\n      id: '',\n      url: '',\n      title: '',\n      description: '',\n      tags: [],\n      createdAt: null,\n      updatedAt: null,\n\n      createdAtTimeAgo: function() {\n        return moment(this.get('createdAt')).fromNow();\n      }.property('createdAt'),\n\n      updatedAtTimeAgo: function() {\n        return moment(this.get('updatedAt')).fromNow();\n      }.property('updatedAt'),\n\n      domain: function() {\n        var a = document.createElement('a');\n        a.href = this.get('url');\n        return a.hostname;\n      }.property('url'),\n\n      serialize: function() {\n        var serialized = this.getProperties('url', 'title', 'description');\n        var tags = this.get('tags');\n\n        var createdAt = this.get('createdAt');\n        if (createdAt !== null) {\n          console.log(typeof createdAt);\n          serialized.createdAt = createdAt;\n        }\n\n        if (tags.length > 0) {\n          serialized.tags = tags.split(',').map($.trim);\n        }\n        return serialized;\n      }.property()\n\n    });\n\n\n    return Bookmark;\n  });",
    "define(\"appkit/router\",\n  [],\n  function() {\n    \"use strict\";\n    var Router = Ember.Router.extend(); // ensure we don't share routes between all Router instances\n\n    Router.map(function() {\n      this.route('component-test');\n      this.route('helper-test');\n\n      this.resource('bookmarks', { path: '/bookmarks' }, function() {\n        this.route('new');\n        this.route('edit', {path: 'edit/:bookmark_id'});\n      });\n      this.route('import', { path: \"/import\" });\n    });\n\n    Router.reopen({\n      location: 'history'\n    });\n\n\n    return Router;\n  });",
    "define(\"appkit/routes/bookmarks/edit\",\n  [],\n  function() {\n    \"use strict\";\n    var BookmarksEditRoute = Ember.Route.extend({\n      // model: function() {\n      //   return App.Bookmark.find(params.bookmark_id);\n      // }\n    });\n\n\n    return BookmarksEditRoute;\n  });",
    "define(\"appkit/routes/bookmarks/index\",\n  [],\n  function() {\n    \"use strict\";\n    var BookmarksIndexRoute = Ember.Route.extend({\n      model: function () {\n        return remoteStorage.bookmarks.archive.getAll();\n      }\n    });\n\n\n    return BookmarksIndexRoute;\n  });",
    "define(\"appkit/routes/bookmarks/new\",\n  [\"appkit/models/bookmark\"],\n  function(Bookmark) {\n    \"use strict\";\n\n    var BookmarksNewRoute = Ember.Route.extend({\n\n      model: function() {\n        return Bookmark.create();\n      }\n\n    });\n\n\n    return BookmarksNewRoute;\n  });",
    "define(\"appkit/routes/component_test\",\n  [],\n  function() {\n    \"use strict\";\n    var ComponentTestRoute = Ember.Route.extend({\n      model: function() {\n        return ['purple', 'green', 'orange'];\n      }\n    });\n\n\n\n    return ComponentTestRoute;\n  });",
    "define(\"appkit/routes/helper_test\",\n  [],\n  function() {\n    \"use strict\";\n    var HelperTestRoute = Ember.Route.extend({\n      model: function() {\n        return {\n          name: \"rebmE\"\n        };\n      }\n    });\n\n\n    return HelperTestRoute;\n  });",
    "define(\"appkit/routes/index\",\n  [],\n  function() {\n    \"use strict\";\n    var IndexRoute = Ember.Route.extend({\n\n      renderTemplate: function() {\n        this.render('bookmarks/index');\n        // uses bookmarks/index controller\n      }\n\n    });\n\n\n    return IndexRoute;\n  });",
    "define(\"appkit/utils/register_components\",\n  [],\n  function() {\n    \"use strict\";\n    /* global requirejs */\n    /* global require */\n\n    function registerComponents(container) {\n      var seen = requirejs._eak_seen;\n      var templates = seen, match;\n      if (!templates) { return; }\n\n      for (var prop in templates) {\n        if (match = prop.match(/templates\\/components\\/(.*)$/)) {\n          require(prop, null, null, true);\n          registerComponent(container, match[1]);\n        }\n      }\n    }\n\n\n    function registerComponent(container, name) {\n      Ember.assert(\"You provided a template named 'components/\" + name + \"', but custom components must include a '-'\", name.match(/-/));\n\n      var fullName         = 'component:' + name,\n          templateFullName = 'template:components/' + name;\n\n      container.injection(fullName, 'layout', templateFullName);\n\n      var Component = container.lookupFactory(fullName);\n\n      if (!Component) {\n        container.register(fullName, Ember.Component);\n        Component = container.lookupFactory(fullName);\n      }\n\n      Ember.Handlebars.helper(name, Component);\n    }\n\n\n    return registerComponents;\n  });",
    "define(\"appkit/views/bookmarks/new\",\n  [],\n  function() {\n    \"use strict\";\n    var BookmarksNewView = Ember.View.extend({\n\n      // contentBinding: this.controller.model\n\n    });\n\n\n    return BookmarksNewView;\n  });",
    "define(\"appkit/views/import_file\",\n  [],\n  function() {\n    \"use strict\";\n    var ImportFileView = Ember.TextField.extend({\n      type: 'file',\n      attributeBindings: ['name'],\n\n      change: function(evt) {\n        var self = this;\n        var input = evt.target;\n\n        if (input.files && input.files[0]) {\n          var reader = new FileReader();\n          var that = this;\n\n          reader.onload = function(e) {\n            self.get('controller').importDeliciousFile( e.target.result );\n          };\n\n          reader.readAsText(input.files[0]);\n        }\n      }\n    });\n\n\n    return ImportFileView;\n  });"
  ]
}